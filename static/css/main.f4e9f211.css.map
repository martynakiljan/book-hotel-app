{"version":3,"file":"static/css/main.f4e9f211.css","mappings":";AAEA;;CAAA,66IACA,qSACA,ixOAEA,KACE,+BACA,gBAGF,KACE,YAGF,YACE,oEAEA,CACA,2BACA,sBACA,kBAGF,+BANE,yBACA,CADA,UAiBF,CAXA,kBAOE,wBAIF,CAPE,MACA,CAMF,WAVE,iBAEA,CAEA,QAFA,QAQF,gBAKA,KACE,QAEA,kBACA,CAHA,YACA,uBACA,CACA,iBAGF,gBAIE,SACA,YC8IE,CDlJF,iBAEA,QACA,+BC+IE,qCDnJJ,eAYA,sBACE,gBAGF,iBAGE,kBC4IE,CD7IF,oCC6IE,yBDzIJ,gBAEI,cAKF,uBAEA,iBACE,aAGF,wBAKF,UACE,qBAIA,4BAGF,iBACE,cAGF,uCACE,eACA,wBACA,qBAEA,CAEA,wBACA,CAFA,iBACA,CADA,YAEA,YACA,CACA,iBAGF,CAJE,gDACA,CALA,UAQF,qDAME,qBACA,mBACA,CAHA,iBACA,CAOA,QAGF,CAdE,wBAEA,CACA,WAOA,MACA,CAJA,6BAEA,CAKF,QALE,KACA,CARA,SAYF,2IAGE,wBAEA,wBAIA,6CACA,CACA,iBAGF,CAJE,eAKA,YAGA,sBACA,CAJA,YACA,sBAEA,CACA,cAEA,gBAKF,4BACE,+BAEA,+BACE,kBAKA,mJAGJ,kBACI,oBArKJ,gDAqKI,CArKJ,mDAqKI,CArKJ,2CAqKI,CArKJ,qDAqKI,CArKJ,2CAqKI,CArKJ,qDAqKI,CArKJ,+CAqKI,CArKJ,4CAqKI,CArKJ,mDAqKI,CArKJ,qDAqKI,CArKJ,kDAqKI,CArKJ,kBAqKI,CArKJ,+CAqKI,CArKJ,sDAqKI,CArKJ,mDAqKI,CArKJ,kDAqKI,CArKJ,2BAqKI,CArKJ,sBAqKI,CArKJ,4BAqKI,CArKJ,gCAqKI,EArKJ,mDAqKI,CArKJ,iBAqKI,CArKJ,yBAqKI,CArKJ,4BAqKI,CArKJ,2BAqKI,CArKJ,sBAqKI,CArKJ,sBAqKI,CArKJ,wBAqKI,CArKJ,qBAqKI,CArKJ,4BAqKI,CArKJ,4BAqKI,CArKJ,qBAqKI,CArKJ,qBAqKI,CArKJ,sBAqKI,CArKJ,8DAqKI,CArKJ,gCAqKI,CArKJ,mEAqKI,CArKJ,wGAqKI,CArKJ,kCAqKI,CArKJ,qBAqKI,CArKJ,wBAqKI,CArKJ,eAqKI,CArKJ,2BAqKI,CArKJ,4BAqKI,EArKJ,mDAqKI,CArKJ,2BAqKI,CArKJ,sBAqKI,CArKJ,gCAqKI,CArKJ,mCAqKI,CArKJ,oCAqKI,EArKJ,2EAqKI,CArKJ,6CAqKI,CArKJ,qCAqKI,CArKJ,6CAqKI","sources":["styles/components.scss","styles/mixins.scss"],"sourcesContent":["@import \"./mixins.scss\";\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\nbody {\n  font-family: \"Poppins\", sans-serif;\n  font-weight: 400;\n}\n\n.nav {\n  height: 80px;\n}\n\n.header-img {\n  background-image: url(../assets/header-images/header2.jpg);\n  width: 100%;\n  height: calc(100vh - 80px);\n  background-repeat: no-repeat;\n  background-size: cover;\n  position: relative;\n}\n\n.header-img__mask {\n  position: absolute;\n  top: 80px;\n  left: 0;\n  right: 0;\n  height: calc(100vh - 80px);\n  width: 100%;\n  background-color: rgb(107 114 128);\n  opacity: 0.6;\n}\n\n.booking__form {\n  position: absolute;\n  top: 0;\n}\n\n.w-dvw {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n}\n\n.booking__form {\n  position: absolute;\n  top: 60%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  padding: 20px;\n\n  @include md-min {\n    top: 50%;\n  }\n}\n\n.font-medium {\n  text-wrap: nowrap;\n}\n\n.checkbox-label {\n  padding: 5px;\n  text-transform: uppercase;\n  letter-spacing: 1px;\n}\n\n.custom-checbox {\n  @include sm-max {\n    font-size: 12px;\n  }\n}\n\n.active {\n  color: #0c9488;\n\n  .footer & {\n    color: inherit;\n  }\n\n  &.button-booking {\n    color: white;\n  }\n}\n\nimg {\n  object-fit: cover;\n}\n\n.hotel-img {\n  max-height: 220px;\n}\n\n.checkbox-label {\n  font-size: 12px;\n}\n\n.custom-checkbox input[type=\"checkbox\"] {\n  appearance: none;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  width: 10px;\n  height: 10px;\n  border-radius: 50%;\n  border: 2px solid #1f2937;\n  outline: none;\n  transition: background-color 0.3s, border-color 0.3s;\n  position: relative;\n}\n\n.custom-checkbox input[type=\"checkbox\"]:checked::after {\n  content: \"\";\n  display: block;\n  width: 4px;\n  height: 4px;\n  border-radius: 50%;\n  background-color: black;\n  border: 2px seagreen;\n  margin: auto;\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n}\n\ninput::-webkit-datetime-edit-day-field:focus,\ninput::-webkit-datetime-edit-month-field:focus,\ninput::-webkit-datetime-edit-year-field:focus {\n  background-color: #0c9488;\n  color: white;\n  outline: none;\n}\n\n.box-price {\n  font-family: \"Lilita One\", sans-serif;\n  font-weight: 400;\n  font-style: normal;\n}\n\n.list-disc {\n  display: flex;\n  flex-direction: column;\n\n  align-items: flex-start;\n  flex-wrap: wrap;\n\n  svg {\n    width: 50px;\n  }\n}\n\n.hotel-container {\n  border-bottom: 2px solid #0c9488;\n\n  &:last-of-type {\n    border-bottom: none;\n  }\n}\n\n  button:disabled {\n    @apply cursor-not-allowed bg-gray-400 hover:bg-gray-400;\n}\n\nbutton:disabled a {\n    pointer-events: none;\n}","$layout-breakpoints: (\n    xxs: 400px,\n    xs: 480px,\n    sm: 768px,\n    md: 992px,\n    lg: 1025px,\n    xl: 1330px,\n);\n$is-web: true;\n\n\n@mixin content-width {\n\n    padding: 0 20px;\n    margin: 0 auto;\n\n    @include md-min() {\n        padding: 0 50px;\n    }\n}\n\n/*\n  Usage:\n  if $print has no value, @media print won't be used\n  if $print has true, @media print will be used\n  @include xl-min($print) {\n\n  }\n*/\n\n@mixin xs-min($print: false) {\n    @include mq-min-print(map-get($layout-breakpoints, xs), $print) {\n        @if $is-web ==true {\n            @content;\n        }\n    }\n}\n\n/*\n  Usage:\n  if $print has no value, @media print won't be used\n  if $print has true, @media print will be used\n  @include sm-min($print) {\n\n  }\n*/\n@mixin sm-min($print: false) {\n    @include mq-min-print(map-get($layout-breakpoints, sm), $print) {\n        @if $is-web ==true {\n            @content;\n        }\n    }\n}\n\n/*\n  Usage:\n  if $print has no value, @media print won't be used\n  if $print has true, @media print will be used\n  @include md-min($print) {\n\n  }\n*/\n@mixin md-min($print: false) {\n    @include mq-min-print(map-get($layout-breakpoints, md), $print) {\n        @if $is-web ==true {\n            @content;\n        }\n    }\n}\n\n/*\n  Usage:\n  if $print has no value, @media print won't be used\n  if $print has true, @media print will be used\n  @include lg-min($print) {\n\n  }\n*/\n@mixin lg-min($print: false) {\n    @include mq-min-print(map-get($layout-breakpoints, lg), $print) {\n        @if $is-web ==true {\n            @content;\n        }\n    }\n}\n\n/*\n  Usage:\n  if $print has no value, @media print won't be used\n  if $print has true, @media print will be used\n  @include xl-min($print) {\n\n  }\n*/\n@mixin xl-min($print: false) {\n    @include mq-min-print(map-get($layout-breakpoints, xl), $print) {\n        @if $is-web ==true {\n            @content;\n        }\n    }\n}\n\n/*\n  Usage:\n  if $print has no value, @media print won't be used\n  if $print has true, @media print will be used\n  @include xs-max($print) {\n\n  }\n*/\n@mixin xs-max($print: false) {\n    @include mq-max-print(map-get($layout-breakpoints, xs), $print) {\n        @content;\n    }\n}\n\n/*\n  Usage:\n  if $print has no value, @media print won't be used\n  if $print has true, @media print will be used\n  @include sm-max($print) {\n\n  }\n*/\n@mixin sm-max($print: false) {\n    @include mq-max-print(map-get($layout-breakpoints, sm), $print) {\n        @content;\n    }\n}\n\n/*\n  Usage:\n  if $print has no value, @media print won't be used\n  if $print has true, @media print will be used\n  @include md-max($print) {\n\n  }\n*/\n@mixin md-max($print: false) {\n    @include mq-max-print(map-get($layout-breakpoints, md), $print) {\n        @content;\n    }\n}\n\n/*\n  Usage:\n  if $print has no value, @media print won't be used\n  if $print has true, @media print will be used\n  @include lg-max($print) {\n\n  }\n*/\n@mixin lg-max($print: false) {\n    @include mq-max-print(map-get($layout-breakpoints, lg), $print) {\n        @content;\n    }\n}\n\n/*\n  Usage:\n  if $print has no value, @media print won't be used\n  if $print has true, @media print will be used\n  @include xl-max($print) {\n\n  }\n*/\n@mixin xl-max($print: false) {\n    @include mq-max-print(map-get($layout-breakpoints, xl), $print) {\n        @content;\n    }\n}\n\n/*\n  Usage:\n  since word cannot work with media print, the files set the is-not-word variable globally,\n  this will ensure that all print things are added in print in pdf.css and print. and all\n  word things are not added within print media query.\n  @include print {\n\n  }\n*/\n\n@mixin print($is-pdf: $is-pdf) {\n    @if $is-pdf ==true {\n        @media print {\n            @content;\n        }\n    }\n}\n\n/*\n  Helpers do not use\n*/\n@mixin mq-min-print($breakpoint, $print: false) {\n    @media screen and (min-width: $breakpoint) {\n        @content;\n    }\n\n    @if $print ==true {\n        @media print {\n            @content;\n        }\n    }\n}\n\n@mixin mq-max-print($breakpoint, $print: false) {\n    @media (max-width: '#{$breakpoint - 1}') {\n        @content;\n    }\n\n    @if $print ==true {\n        @media print {\n            @content;\n        }\n    }\n}"],"names":[],"sourceRoot":""}